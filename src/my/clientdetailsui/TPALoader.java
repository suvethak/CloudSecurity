/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package my.clientdetailsui;

import java.io.File;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author kss
 */
public class TPALoader extends javax.swing.JFrame {

    /**
     * Creates new form TPALoader
     */
    static String getUser;
    static String ipaddr;
    static String getClient;
    public static int fileSize;
    
    public TPALoader()  {
        GetIP  g = new GetIP();
        ipaddr = g.getIPaddr();
     
        initComponents();
      }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        userName = new javax.swing.JLabel(getUser);
        ip = new javax.swing.JLabel(ipaddr);
        fileName = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        hexSignature = new javax.swing.JTextArea();
        clientName = new javax.swing.JLabel(getClient);
        verify = new javax.swing.JButton();
        LogOut = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SCLOUD TPA");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "File Integrity verification", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(51, 51, 51)));

        jLabel1.setText("Username");

        jLabel2.setText("Clientname");

        jLabel3.setText("I.P Address");

        jLabel4.setText("Filename");

        userName.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                userNameComponentShown(evt);
            }
        });

        ip.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                ipComponentShown(evt);
            }
        });

        fileName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileNameActionPerformed(evt);
            }
        });

        jLabel8.setText("Signature");

        hexSignature.setColumns(20);
        hexSignature.setRows(5);
        jScrollPane1.setViewportView(hexSignature);

        clientName.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                clientNameComponentShown(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(ip, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fileName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(userName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clientName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userName, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clientName, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ip, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(fileName, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabel8))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        verify.setText("Verify");
        verify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifyActionPerformed(evt);
            }
        });

        LogOut.setText("LogOut");
        LogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(verify)
                        .addGap(90, 90, 90)
                        .addComponent(LogOut))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(72, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(verify)
                    .addComponent(LogOut))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileNameActionPerformed
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_fileNameActionPerformed

    private void verifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifyActionPerformed
        
                                         
            // TODO add your handling code here:
           String signature = hexSignature.getText();
            try {
                ClientDetailsUI.main();
            } catch (Exception ex) {
                Logger.getLogger(TPALoader.class.getName()).log(Level.SEVERE, null, ex);
            }
           byte[] part1 = null, part2 = null, part3 = null, part4 = null;
            File file;
            String[] hex=new String[4];
            //Connecting Database to get file size        
            DBConnection db = new DBConnection();
            Statement stmt = db.connect();

            try {
                ResultSet rs = stmt.executeQuery("select * from fileowner where owner= "
                        + "'" + getClient + "' and fileName='" + fileName.getText() + "'");
                while (rs.next()) {

                    String temp = rs.getString("fileSize");
                    fileSize = Integer.parseInt(temp);
                    System.out.println(fileSize);
                }


            } catch (SQLException ex) {
                Logger.getLogger(ClientLoader.class.getName()).log(Level.SEVERE, null, ex);
            }

            //Getting part1 data
            file = ClientDetailsUI.download("Cloud Server 1", fileName.getText().trim(),1);
            String getContents = FileContentsToString.main(file);
            BinaryToString bs = new BinaryToString();
            String orgForm = null;
            try {
                orgForm = bs.getBinaryToString(getContents);
                hex[0]=SHA256.main(orgForm);
            } catch (Exception ex) {
                Logger.getLogger(ClientLoader.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                part1 = Decrypt.main(orgForm);

            } catch (Exception ex) {
                Logger.getLogger(ClientLoader.class.getName()).log(Level.SEVERE, null, ex);
            }

            //Getting part2 data
            file = ClientDetailsUI.download("Cloud Server 2", fileName.getText().trim(),2);
            getContents = FileContentsToString.main(file);

            orgForm = null;
            try {
                orgForm = bs.getBinaryToString(getContents);
                hex[1]=SHA256.main(orgForm);
            } catch (Exception ex) {
                Logger.getLogger(ClientLoader.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                part2 = Decrypt.main(orgForm);

            } catch (Exception ex) {
                Logger.getLogger(ClientLoader.class.getName()).log(Level.SEVERE, null, ex);
            }

            //Getting part3
            file = ClientDetailsUI.download("Cloud Server 3", fileName.getText().trim(),3);
            getContents = FileContentsToString.main(file);

            orgForm = null;
            try {
                orgForm = bs.getBinaryToString(getContents);
                hex[2]=SHA256.main(orgForm);
            } catch (Exception ex) {
                Logger.getLogger(ClientLoader.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                part3 = Decrypt.main(orgForm);

            } catch (Exception ex) {
                Logger.getLogger(ClientLoader.class.getName()).log(Level.SEVERE, null, ex);
            }


            //Getting part 4
            file = ClientDetailsUI.download("Cloud Server 4", fileName.getText().trim(),4);
            getContents = FileContentsToString.main(file);

            orgForm = null;
            try {
                orgForm = bs.getBinaryToString(getContents);
                hex[3]=SHA256.main(orgForm);
            } catch (Exception ex) {
                Logger.getLogger(ClientLoader.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                part4 = Decrypt.main(orgForm);

            } catch (Exception ex) {
                Logger.getLogger(ClientLoader.class.getName()).log(Level.SEVERE, null, ex);
            }
        try {
            //Merging the Entire file after downloading
            PartByPartHexSignature.main(hex,getClient,fileName.getText());
        } catch (SQLException ex) {
            Logger.getLogger(TPALoader.class.getName()).log(Level.SEVERE, null, ex);
        }
            MergeFile.mergeBytes(part1, part2, part3, part4, fileSize, fileName.getText());
            
            try {
                    
                    String str=fileReader.readFile("C:\\Download\\"+fileName.getText());
                    String HexSignature=SHA256.main(str);
                    if(signature.equals(HexSignature))
                     JOptionPane.showMessageDialog(rootPane, "File Integrity has been verified");
                    else
                    {
                       
                       JOptionPane.showMessageDialog(rootPane, "File Recovery under process");
                        try {
                                SignatureVerification.main(signature,fileName.getText(),fileSize,getClient);
                            } catch (SQLException ex) {
                                        Logger.getLogger(TPALoader.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                    }
                } catch (IOException ex) {
                    Logger.getLogger(ClientLoader.class.getName()).log(Level.SEVERE, null, ex);
                }
       
    }//GEN-LAST:event_verifyActionPerformed

    private void LogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogOutActionPerformed
        // TODO add your handling code here:
        dispose();
        ClientUI.main();
    }//GEN-LAST:event_LogOutActionPerformed

    private void userNameComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_userNameComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_userNameComponentShown

    private void ipComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_ipComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_ipComponentShown

    private void clientNameComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_clientNameComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_clientNameComponentShown

    /**
     * @param args the command line arguments
     */
    public static void main(final String user) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TPALoader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TPALoader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TPALoader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TPALoader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                 getUser = user;
                 
                 DBConnection db = new DBConnection();
        Statement stmt = db.connect();
        
        try {
            ResultSet rs = stmt.executeQuery("select * from TPA where TPAName= "
                    + "'" + getUser + "' ");
            while(rs.next())
            getClient=rs.getString("clientName");
             
        } catch (SQLException ex) {
            Logger.getLogger(TPALoader.class.getName()).log(Level.SEVERE, null, ex);
        }
             new TPALoader().setVisible(true);   
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton LogOut;
    private javax.swing.JLabel clientName;
    private javax.swing.JTextField fileName;
    private javax.swing.JTextArea hexSignature;
    private javax.swing.JLabel ip;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel userName;
    private javax.swing.JButton verify;
    // End of variables declaration//GEN-END:variables
}
