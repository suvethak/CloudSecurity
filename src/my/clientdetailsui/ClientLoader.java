/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package my.clientdetailsui;


import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Suvetha Kannan
 */
public class ClientLoader extends javax.swing.JFrame {

    /**
     * Creates new form ClientLoader
     */
    
    static String getUser;
    static String ipaddr;
    static File file;
    static int fileSize;
    static String fName;
    static String fileNameFromFileChooser;
    public ClientLoader() {
         GetIP  g = new GetIP();
        ipaddr = g.getIPaddr();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        userName = new javax.swing.JLabel(getUser);
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ip = new javax.swing.JLabel(ipaddr);
        fileName = new javax.swing.JTextField();
        browse = new javax.swing.JButton();
        upload = new javax.swing.JButton();
        download = new javax.swing.JButton();
        showfiles = new javax.swing.JButton();
        logout = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("sCLOUD ");
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Upload/Download your file"));
        jPanel1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPanel1FocusGained(evt);
            }
        });

        jLabel1.setText("Username");

        userName.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                userNameComponentShown(evt);
            }
        });

        jLabel3.setText("IP address");

        jLabel4.setText("File Name");

        ip.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                ipComponentShown(evt);
            }
        });

        fileName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(userName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ip, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fileName, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ip, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileName, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        browse.setText("Browse");
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });

        upload.setText("Upload");
        upload.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                uploadMouseClicked(evt);
            }
        });
        upload.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                uploadStateChanged(evt);
            }
        });
        upload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadActionPerformed(evt);
            }
        });
        upload.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                uploadKeyPressed(evt);
            }
        });

        download.setText("Download");
        download.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadActionPerformed(evt);
            }
        });

        showfiles.setText("Show Files");
        showfiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showfilesActionPerformed(evt);
            }
        });

        logout.setText("Log out");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(browse)
                        .addGap(18, 18, 18)
                        .addComponent(upload)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addComponent(download)
                        .addGap(18, 18, 18)
                        .addComponent(showfiles)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(logout))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(browse)
                    .addComponent(upload)
                    .addComponent(download)
                    .addComponent(showfiles)
                    .addComponent(logout))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed

        //Choosing the file
        JFileChooser fileChooser = new JFileChooser();
        int retVal = fileChooser.showOpenDialog(this);
        if (retVal == JFileChooser.APPROVE_OPTION) {

            file = fileChooser.getSelectedFile();
            fileSize = (int) file.length();
            System.out.println(file.getAbsolutePath());
            System.out.println(file.getPath());
            fileName.setText(file.getName());
            fName = file.getName();
            try {
                String str=fileReader.readFile(file.getAbsolutePath());
                String HexSignature=SHA256.main(str);
                JOptionPane.showMessageDialog(rootPane, "File's Signature:"+HexSignature);
            } catch (IOException ex) {
                Logger.getLogger(ClientLoader.class.getName()).log(Level.SEVERE, null, ex);
            }

           
        }
            // TODO add your handling code here:
    }//GEN-LAST:event_browseActionPerformed

    private void uploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadActionPerformed
        
          ProgressBar.main();      
        DBConnection db = new DBConnection();
        Statement stmt = db.connect();
        try {
            int rs = stmt.executeUpdate("insert into fileowner (owner,fileName,fileSize,part1,part2,part3,part4) values "
                    + "('" + getUser + "','" + file.getName().trim() + "'," + fileSize + ",0,0,0,0)");
        } catch (SQLException ex) {
            Logger.getLogger(ClientLoader.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (fileName.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Choose your file");
        } else {
            try {
                ClientDetailsUI.main();
            } catch (Exception ex) {
                Logger.getLogger(ClientLoader.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            FileOutputStream fos1 = null;
            FileOutputStream fos2 = null;
            FileOutputStream fos3 = null;
            FileOutputStream fos4 = null;
            FileOutputStream fos5 = null;
            FileOutputStream fos6 = null;
            FileOutputStream fos7 = null;
            FileOutputStream fos8 = null;
            
            try {
                //Getting the chunked contents
                partHexSignature.getUser(getUser,fileName.getText());
                String[] getContents = FileSplit.main(file);
                String[] XoredContents=XorBinary.main(getContents);
                
                System.out.println("File Contents");
                System.out.println(getContents[0]);
               
                //System.out.println("Xored Contents:"+Integer.toString(Integer.parseInt(getContents[0])^Integer.parseInt(getContents[1])));
                
                //Uploading file and Create temp file
                File f1 = new File(fileName.getText());
               
                /*
                File f2 = new File("c:\\part2\\" + fileName.getText());
                File f3 = new File("c:\\part3\\" + fileName.getText());
                File f4 = new File("c:\\part4\\" + fileName.getText());
                 */
                
                
                fos1 = new FileOutputStream(f1);
                fos2 = new FileOutputStream(f1);
                fos3 = new FileOutputStream(f1);
                fos4 = new FileOutputStream(f1);
                fos5 = new FileOutputStream(f1);
                fos6 = new FileOutputStream(f1);
                fos7 = new FileOutputStream(f1);
                fos8 = new FileOutputStream(f1);
                
                try {

                    fos1.write(getContents[0].getBytes());
                    ClientDetailsUI.upload(f1, "Cloud Server 1",1);
                    ClientDetailsUI.upload(f1, "Replica Server 1",5);
                    fos1.close();
                    f1.delete();
                    // fos.write("".getBytes());
                    fos2.write(getContents[1].getBytes());
                    ClientDetailsUI.upload(f1, "Cloud Server 2",2);
                    ClientDetailsUI.upload(f1, "Replica Server 2",6);
                    fos2.close();
                    f1.delete();
                    //f2.delete();
                    //  fos3.write("".getBytes());
                    fos3.write(getContents[2].getBytes());
                    ClientDetailsUI.upload(f1, "Cloud Server 3",3);
                    ClientDetailsUI.upload(f1, "Replica Server 3",7);
                    fos3.close();
                    f1.delete();
                    // f3.delete();
                    //   fos.write("".getBytes());
                    fos4.write(getContents[3].getBytes());
                    ClientDetailsUI.upload(f1, "Cloud Server 4",4);
                    ClientDetailsUI.upload(f1, "Replica Server 4",8);
                    fos4.close();
                    f1.delete();
                    //f4.delete();
                    
                    fos5.write(XoredContents[0].getBytes());
                    ClientDetailsUI.upload(f1, "Xor Server 1",9);
                    fos5.close();
                    f1.delete();
                    
                    fos6.write(XoredContents[1].getBytes());
                    ClientDetailsUI.upload(f1, "Xor Server 2",9);
                    fos1.close();
                    f1.delete();
                    
                    fos7.write(XoredContents[2].getBytes());
                    ClientDetailsUI.upload(f1, "Xor Server 3",9);
                    fos1.close();
                    f1.delete();
                    
                    fos8.write(XoredContents[3].getBytes());
                    ClientDetailsUI.upload(f1, "Xor Server 4",9);
                    fos1.close();
                    f1.delete();
                    

                } catch (IOException ex) {
                    Logger.getLogger(ClientLoader.class.getName()).log(Level.SEVERE, null, ex);
                }
                fileName.setText("");
                JOptionPane.showMessageDialog(rootPane, "Your file has been uploaded" + fileName.getText());
                
            } catch (FileNotFoundException ex) {
                Logger.getLogger(ClientLoader.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_uploadActionPerformed

    private void downloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadActionPerformed
        try {
            ClientDetailsUI.main();
        } catch (Exception ex) {
            Logger.getLogger(ClientLoader.class.getName()).log(Level.SEVERE, null, ex);
        }
        byte[] part1 = null, part2 = null, part3 = null, part4 = null;
        File file;

        //Connecting Database to get file size        
        DBConnection db = new DBConnection();
        Statement stmt = db.connect();

        try {
            ResultSet rs = stmt.executeQuery("select * from fileowner where owner= "
                    + "'" + getUser + "' and fileName='" + fName + "'");
            while (rs.next()) {

                String temp = rs.getString("fileSize");
                fileSize = Integer.parseInt(temp);
                System.out.println(fileSize);
            }


        } catch (SQLException ex) {
            Logger.getLogger(ClientLoader.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Getting part1 data
        file = ClientDetailsUI.download("Cloud Server 1", fileName.getText().trim(),1);
        String getContents = FileContentsToString.main(file);
        BinaryToString bs = new BinaryToString();
        String orgForm = null;
        try {
            orgForm = bs.getBinaryToString(getContents);
        } catch (Exception ex) {
            Logger.getLogger(ClientLoader.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            part1 = Decrypt.main(orgForm);

        } catch (Exception ex) {
            Logger.getLogger(ClientLoader.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Getting part2 data
        file = ClientDetailsUI.download("Cloud Server 2", fileName.getText().trim(),2);
        getContents = FileContentsToString.main(file);

        orgForm = null;
        try {
            orgForm = bs.getBinaryToString(getContents);
        } catch (Exception ex) {
            Logger.getLogger(ClientLoader.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            part2 = Decrypt.main(orgForm);

        } catch (Exception ex) {
            Logger.getLogger(ClientLoader.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Getting part3
        file = ClientDetailsUI.download("Cloud Server 3", fileName.getText().trim(),3);
        getContents = FileContentsToString.main(file);

        orgForm = null;
        try {
            orgForm = bs.getBinaryToString(getContents);
        } catch (Exception ex) {
            Logger.getLogger(ClientLoader.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            part3 = Decrypt.main(orgForm);

        } catch (Exception ex) {
            Logger.getLogger(ClientLoader.class.getName()).log(Level.SEVERE, null, ex);
        }


        //Getting part 4
        file = ClientDetailsUI.download("Cloud Server 4", fileName.getText().trim(),4);
        getContents = FileContentsToString.main(file);

        orgForm = null;
        try {
            orgForm = bs.getBinaryToString(getContents);
        } catch (Exception ex) {
            Logger.getLogger(ClientLoader.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            part4 = Decrypt.main(orgForm);

        } catch (Exception ex) {
            Logger.getLogger(ClientLoader.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Merging the Entire file after downloading

        MergeFile.mergeBytes(part1, part2, part3, part4, fileSize, fileName.getText());
        JOptionPane.showMessageDialog(rootPane, "Your File has been Downloaded");
        
    }//GEN-LAST:event_downloadActionPerformed

    private void showfilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showfilesActionPerformed
        // TODO add your handling code here:
        ClientFileChooser.main(getUser);
    }//GEN-LAST:event_showfilesActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        // TODO add your handling code here:
        dispose();
        ClientUI.main();
    }//GEN-LAST:event_logoutActionPerformed

    private void userNameComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_userNameComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_userNameComponentShown

    private void ipComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_ipComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_ipComponentShown

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_formFocusGained

    private void jPanel1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPanel1FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel1FocusGained

    private void fileNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileNameActionPerformed

    private void uploadKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_uploadKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_uploadKeyPressed

    private void uploadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_uploadMouseClicked
        // TODO add your handling code here:
          

    }//GEN-LAST:event_uploadMouseClicked

    private void uploadStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_uploadStateChanged
        // TODO add your handling code here:
              
    }//GEN-LAST:event_uploadStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(final String user) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientLoader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientLoader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientLoader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientLoader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                getUser = user;
                new ClientLoader().setVisible(true);
            }
        });
    }
    public static void displayFileName(Object contents)
    {
        fileNameFromFileChooser = contents.toString();
        fileName.setText(fileNameFromFileChooser);
        fName=contents.toString();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browse;
    private javax.swing.JButton download;
    private static javax.swing.JTextField fileName;
    private javax.swing.JLabel ip;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton logout;
    private javax.swing.JButton showfiles;
    private javax.swing.JButton upload;
    private javax.swing.JLabel userName;
    // End of variables declaration//GEN-END:variables
}
